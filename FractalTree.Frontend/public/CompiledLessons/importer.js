// This File Was Generated By The Fractal Tree Lesson Compiler (mkall.py)

// This File Was Generated By The Fractal Tree Lesson Compiler (mklesson.py)

 if (!window.lessonList) { window.lessonList = []; } 
window.compiledCourse_javascript_intro_en = {"id": "javascript_intro", "lang": "en", "name": "Intro To JavaScript", "description": "Dive into the world of JavaScript programming, no prior coding knowledge required.", "icon": "JavaScript.webp", "segments": ["# About JavaScript\nLearn how and why to use JavaScript in the industry\n\n## History\nJavaScript was developed by Brendan Eich while he was working at Netscape (a very old browser company). \nDespite its name, JavaScript is quite different from Java. Modern JavaScript isn't technically called JavaScript, it's real name is ECMAScript.\nHowever, for simplicity we will refer to it as JavaScript from now on.\n\n## Why JavaScript?\nJavaScript is crucial for both frontend and backend development. On the frontend, it enhances user experiences by enabling dynamic content and interactive features, such as real-time updates and animations. On the backend, environments like Node.js allow JavaScript to build efficient server-side applications, making it an essential tool for full-stack development."]};

window.lessonList.push(window.compiledCourse_javascript_intro_en);

// This File Was Generated By The Fractal Tree Lesson Compiler (mklesson.py)

 if (!window.lessonList) { window.lessonList = []; } 
window.compiledCourse_python_intro_ar = {"id": "python_intro", "lang": "ar", "name": "Intro To Python", "description": "Learn the very basics of Python 3, no prior coding knowledge required.", "icon": "Python.webp", "segments": []};

window.lessonList.push(window.compiledCourse_python_intro_ar);

window.compiledCourse_python_intro_en = {"id": "python_intro", "lang": "en", "name": "Intro To Python", "description": "Learn the very basics of Python 3, no prior coding knowledge required.", "icon": "Python.webp", "segments": ["# Python Context\nLet's get you familiar with python and its history\n\n## What exactly is Python?\n\nWell, it's a popular programming language that released in 1991 by the great individual Guido Van Rossum. You may use Python for web development, software development, mathematics, and data analysis! \n\n## Why Python?\n\nPython works on virtually every platform and its syntax is as if you're speaking english. This syntax, in particular, permits for new programmers such as yourself to write programs in a significantly lesser amount of lines. Later on in your computer science journey, you'll realize that optimization versus lines in code are NOT linearly associated with each other. However, for simplicity's sake, optimization and complexity will be out of the scope of your learning.\n\nRun your first python statement: \n```python\nprint(\"Hello, World!\")\n```\n\nAs you can see, the \"print\" function will display text to the screen.\nIt's important to encase the text with double quotes \"\", otherwise you will get an error.\nYou will learn more about python's syntax in future lessons.", "# Syntax\nLearn how to indent and use python syntax properly\n\nPython syntax can get tedious due to indentation. Spaces are important!\n\nWhen programming in other languages, indentation is only for **readability**. However, in the python programming language, indentation is **essential**.\nYou may use either 2 or 4 spaces to indent your code, but you must keep the spacing consistent.\n\n## Example:\n\nWorking code:\n```python\nif 1 + 1 is 2:\n    print(\"Indents are important\")\n```\nBad code:\n```python\nif 1 + 1 is 2:\nprint(\"This does not work\")\n```\n", "# Variables\nLearn how to create and identify variables\n\nWhat exactly is a variable? \nSimply put, it's a way to store information. In the case of python, there's no actual function or command to declare a variable. \n\nEvery single time you assign a value to a \"word\" or \"variable\" then the variable is created.\nExample:\n```python\nx = 1\nprint(x)\n```\nVariables, as you can see, do not need to be declared with any \"type\". Their \"type\" can be changed any time.\nExample:\n```python\nx = 1\nx \"Tree\"\nprint(x)\n```\n## How can we identify what type of variable are we dealing with?\nWell, it's quite simple. We use the **type()** function. There are four variable types that we will be looking at:\n* Strings\n* Integers\n* Floats\n* Booleans\n\n## Try it out here:\n```python\nsvar = \"Tree\"\nivar = 5\nfvar = 5.0\nbvar = True\nprint(type(svar))\nprint(type(ivar))\nprint(type(fvar))\nprint(type(bvar))\n```", "# Numeric Types\nWhat are numeric types?\n\nNumeric Types are a type of data type that is used to represent and manipulate numic values, these can be in the form of whole numbers, integers, and decimals.\n\n# Integers\nIntegers are represented through the (int) data type that represents whole numbers and integers.\n\n```python\na = 10 # Positive Integers\nb = -5 # Negative Integer\nc = 0 # Zero\nprint(x)\nprint(y)\nprint(z)\n```\n# Floating points\nRepresented through the (float) data type, they represent decimal numbers and always have a decimal point.\n\n```python\npi = 3.14\nshares = -5.9\nprint(pi)\nprint(shares)\n```\n\n# Complex Numbers\nRepresenting imaginary numbers, complex is a more unique data type, that can be separated by real and imaginary using the (.real) and (.imag) methods.\n\n```python\nimag_function = 3 + 4j\nprint(imag_function.real)\nprint(imag_function.imag)\n```"]};

window.lessonList.push(window.compiledCourse_python_intro_en);


window.doneInitStep()